plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.epages.restdocs-api-spec' version "0.19.2"
}

group = 'com.baro'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // data
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'com.h2database:h2'

    // security
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // restdocs & openapi
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'

}

tasks.named('test') {
    useJUnitPlatform()
}

compileJava {
    dependsOn 'clean'
}

openapi3 {
    servers = [ {url = 'http://localhost:8080' } ]
    title = 'USER SERVICE API'
    description = ''
    version = '1.0.0'
    format = 'json'
}

tasks.register('setDocs') {
    dependsOn 'openapi3'
    doLast {
        copy {
            from "build/api-spec"
            include "*.json"
            include "*.yaml"
            into "build/resources/main/static/springdoc"
            rename { String fileName ->
                if (fileName.endsWith('.json')) {
                    return fileName.replace('.json', '-user-service.json')
                } else if (fileName.endsWith('.yaml')) {
                    return fileName.replace('.yaml', '-user-service.yml')
                }
                return fileName
            }
        }
    }
}

// bootRun 실행 시 문서 생성 태스크를 실행
bootRun {
    dependsOn 'setDocs'
}

// bootJar 실행 시 문서 생성 태스크를 실행
bootJar {
    dependsOn 'setDocs'
}
